import { createSlice, PayloadAction } from '@reduxjs/toolkit'
import { RootState } from '../../app/store'
import { Market, MarketState, PriceInfo } from '../../misc/types'
import { getMarkets } from './marketsThunk'

const initialState: MarketState = {
  data: [],
  status: 'idle',
}

export const marketsSlice = createSlice({
  name: 'markets',
  initialState,
  reducers: {
    updateMarket: (
      state,
      action: PayloadAction<{ [key: number]: PriceInfo }>
    ) => {
      state.data.map((market, index) => {
        if (action.payload[market.id])
          if (
            market.price_info &&
            market.price_info.created_at < action.payload[market.id].created_at
          ) {
            state.data[index] = {
              ...market,
              price_info: action.payload[market.id],
              price: action.payload[market.id].price,
            }
          }
        return market
      })
    },
  },
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      // Get markets reducer
      .addCase(getMarkets.pending, (state) => {
        state.status = 'loading'
        state.action = 'getMarkets'
      })
      .addCase(getMarkets.fulfilled, (state, action) => {
        const markets: Market[] = []
        for (let i = 0; i < action.payload.count; i++)
          markets.push(action.payload.results[i])
        state.status = 'idle'
        state.data = markets
        state.msg = 'success'
      })
      .addCase(getMarkets.rejected, (state, action) => {
        state.status = 'failed'
        state.msg = action.error.message
      })
  },
})

export const { updateMarket } = marketsSlice.actions
export const selectMarkets = (state: RootState) => state.markets
export default marketsSlice.reducer
